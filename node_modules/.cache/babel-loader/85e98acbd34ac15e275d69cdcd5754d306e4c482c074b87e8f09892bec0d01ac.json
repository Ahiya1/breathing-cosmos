{"ast":null,"code":"var _jsxFileName = \"/home/ahiya/Ahiya/full_projects/breathing-cosmos/src/components/CosmicCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction CosmicCanvas({\n  entities,\n  cosmicState,\n  breathData\n}) {\n  _s();\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    const ctx = canvas.getContext(\"2d\");\n    const render = () => {\n      drawCosmos(ctx, canvas.width, canvas.height);\n      animationRef.current = requestAnimationFrame(render);\n    };\n    render();\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [entities, cosmicState, breathData]);\n  const drawCosmos = (ctx, width, height) => {\n    // Clear with cosmic background\n    ctx.fillStyle = `rgba(0, 0, 5, ${0.02 + cosmicState.consciousness * 0.03})`;\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw cosmic background field\n    drawCosmicField(ctx, width, height);\n\n    // Draw unity field connections\n    if (cosmicState.unity > 0.3) {\n      drawUnityField(ctx);\n    }\n\n    // Draw all entities\n    entities.forEach(entity => drawEntity(ctx, entity));\n\n    // Draw transcendence effects\n    if (cosmicState.transcendence > 0.5) {\n      drawTranscendenceField(ctx, width, height);\n    }\n\n    // Draw breath visualization\n    if (breathData) {\n      drawBreathField(ctx, width, height);\n    }\n  };\n  const drawCosmicField = (ctx, width, height) => {\n    // Subtle cosmic background particles\n    const particleCount = Math.floor(cosmicState.consciousness * 100);\n    for (let i = 0; i < particleCount; i++) {\n      const x = Math.random() * width;\n      const y = Math.random() * height;\n      const size = Math.random() * 2;\n      const alpha = cosmicState.consciousness * 0.1;\n      ctx.globalAlpha = alpha;\n      ctx.fillStyle = `hsl(${240 + Math.random() * 60}, 50%, 30%)`;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n    ctx.globalAlpha = 1;\n  };\n  const drawUnityField = ctx => {\n    // Connect nearby entities with unity lines\n    const maxDistance = 150;\n    const lineAlpha = cosmicState.unity * 0.2;\n    ctx.globalAlpha = lineAlpha;\n    ctx.strokeStyle = `hsl(${200 + cosmicState.unity * 60}, 60%, 50%)`;\n    ctx.lineWidth = 1;\n    for (let i = 0; i < entities.length; i++) {\n      for (let j = i + 1; j < entities.length; j++) {\n        const entity1 = entities[i];\n        const entity2 = entities[j];\n        const distance = Math.sqrt(Math.pow(entity1.x - entity2.x, 2) + Math.pow(entity1.y - entity2.y, 2));\n        if (distance < maxDistance) {\n          const connectionStrength = 1 - distance / maxDistance;\n          ctx.globalAlpha = lineAlpha * connectionStrength;\n          ctx.beginPath();\n          ctx.moveTo(entity1.x, entity1.y);\n          ctx.lineTo(entity2.x, entity2.y);\n          ctx.stroke();\n        }\n      }\n    }\n    ctx.globalAlpha = 1;\n  };\n  const drawEntity = (ctx, entity) => {\n    const {\n      x,\n      y,\n      size,\n      consciousness,\n      complexity,\n      transcended,\n      hue,\n      life\n    } = entity;\n\n    // Main entity body\n    const alpha = transcended ? 0.9 : life * 0.8;\n    ctx.globalAlpha = alpha;\n\n    // Consciousness glow\n    if (consciousness > 0.3) {\n      const glowSize = size * (1 + consciousness * 2);\n      const gradient = ctx.createRadialGradient(x, y, 0, x, y, glowSize);\n      gradient.addColorStop(0, `hsla(${hue}, 80%, 70%, ${consciousness * 0.3})`);\n      gradient.addColorStop(1, \"transparent\");\n      ctx.fillStyle = gradient;\n      ctx.beginPath();\n      ctx.arc(x, y, glowSize, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Entity core\n    ctx.fillStyle = `hsl(${hue}, ${70 + consciousness * 30}%, ${40 + consciousness * 30}%)`;\n    ctx.beginPath();\n    ctx.arc(x, y, size, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Consciousness ring\n    if (consciousness > 0.5) {\n      ctx.globalAlpha = consciousness * 0.6;\n      ctx.strokeStyle = `hsl(${hue + 60}, 90%, 80%)`;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.arc(x, y, size + 3, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    // Transcendence aura\n    if (transcended) {\n      ctx.globalAlpha = 0.4;\n      ctx.strokeStyle = \"white\";\n      ctx.lineWidth = 1;\n      ctx.setLineDash([3, 3]);\n      ctx.beginPath();\n      ctx.arc(x, y, size + 8, 0, Math.PI * 2);\n      ctx.stroke();\n      ctx.setLineDash([]);\n    }\n\n    // Complexity patterns\n    if (complexity > 1) {\n      ctx.globalAlpha = complexity * 0.3;\n      ctx.strokeStyle = `hsl(${hue + 120}, 60%, 60%)`;\n      ctx.lineWidth = 1;\n      const spikes = Math.floor(complexity * 8);\n      ctx.beginPath();\n      for (let i = 0; i < spikes; i++) {\n        const angle = i / spikes * Math.PI * 2;\n        const x1 = x + Math.cos(angle) * size;\n        const y1 = y + Math.sin(angle) * size;\n        const x2 = x + Math.cos(angle) * (size + complexity * 5);\n        const y2 = y + Math.sin(angle) * (size + complexity * 5);\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n      }\n      ctx.stroke();\n    }\n    ctx.globalAlpha = 1;\n  };\n  const drawTranscendenceField = (ctx, width, height) => {\n    // Transcendence creates reality ripples\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const rippleCount = 5;\n    const time = Date.now() * 0.001;\n    ctx.globalAlpha = cosmicState.transcendence * 0.1;\n    for (let i = 0; i < rippleCount; i++) {\n      const radius = (50 + i * 100 + Math.sin(time + i) * 30) * cosmicState.transcendence;\n      const hue = 280 + i * 20;\n      ctx.strokeStyle = `hsl(${hue}, 70%, 60%)`;\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n    ctx.globalAlpha = 1;\n  };\n  const drawBreathField = (ctx, width, height) => {\n    if (!breathData.amplitude) return;\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const breathRadius = 100 + breathData.amplitude * 200;\n\n    // Breath presence field\n    ctx.globalAlpha = breathData.amplitude * 0.1;\n    const gradient = ctx.createRadialGradient(centerX, centerY, 0, centerX, centerY, breathRadius);\n    const breathColor = breathData.breathPhase === \"inhale\" ? 180 : breathData.breathPhase === \"exhale\" ? 60 : 300;\n    gradient.addColorStop(0, `hsla(${breathColor}, 60%, 50%, 0.2)`);\n    gradient.addColorStop(1, \"transparent\");\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, breathRadius, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Breath pulse ring\n    if (breathData.breathPhase === \"inhale\" || breathData.breathPhase === \"exhale\") {\n      ctx.globalAlpha = breathData.amplitude * 0.5;\n      ctx.strokeStyle = `hsl(${breathColor}, 80%, 70%)`;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, breathRadius * 0.7, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n    ctx.globalAlpha = 1;\n  };\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      const canvas = canvasRef.current;\n      if (canvas) {\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n      }\n    };\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    className: \"cosmic-canvas\",\n    style: {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      width: \"100%\",\n      height: \"100%\",\n      zIndex: 1\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 277,\n    columnNumber: 5\n  }, this);\n}\n_s(CosmicCanvas, \"Aj99V/NnIi+t4KIlehR3+TWXPv0=\");\n_c = CosmicCanvas;\nexport default CosmicCanvas;\nvar _c;\n$RefreshReg$(_c, \"CosmicCanvas\");","map":{"version":3,"names":["React","useRef","useEffect","jsxDEV","_jsxDEV","CosmicCanvas","entities","cosmicState","breathData","_s","canvasRef","animationRef","canvas","current","width","window","innerWidth","height","innerHeight","ctx","getContext","render","drawCosmos","requestAnimationFrame","cancelAnimationFrame","fillStyle","consciousness","fillRect","drawCosmicField","unity","drawUnityField","forEach","entity","drawEntity","transcendence","drawTranscendenceField","drawBreathField","particleCount","Math","floor","i","x","random","y","size","alpha","globalAlpha","beginPath","arc","PI","fill","maxDistance","lineAlpha","strokeStyle","lineWidth","length","j","entity1","entity2","distance","sqrt","pow","connectionStrength","moveTo","lineTo","stroke","complexity","transcended","hue","life","glowSize","gradient","createRadialGradient","addColorStop","setLineDash","spikes","angle","x1","cos","y1","sin","x2","y2","centerX","centerY","rippleCount","time","Date","now","radius","amplitude","breathRadius","breathColor","breathPhase","handleResize","addEventListener","removeEventListener","ref","className","style","position","top","left","zIndex","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ahiya/Ahiya/full_projects/breathing-cosmos/src/components/CosmicCanvas.js"],"sourcesContent":["import React, { useRef, useEffect } from \"react\";\n\nfunction CosmicCanvas({ entities, cosmicState, breathData }) {\n  const canvasRef = useRef(null);\n  const animationRef = useRef(null);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    if (!canvas) return;\n\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n\n    const ctx = canvas.getContext(\"2d\");\n\n    const render = () => {\n      drawCosmos(ctx, canvas.width, canvas.height);\n      animationRef.current = requestAnimationFrame(render);\n    };\n\n    render();\n\n    return () => {\n      if (animationRef.current) {\n        cancelAnimationFrame(animationRef.current);\n      }\n    };\n  }, [entities, cosmicState, breathData]);\n\n  const drawCosmos = (ctx, width, height) => {\n    // Clear with cosmic background\n    ctx.fillStyle = `rgba(0, 0, 5, ${0.02 + cosmicState.consciousness * 0.03})`;\n    ctx.fillRect(0, 0, width, height);\n\n    // Draw cosmic background field\n    drawCosmicField(ctx, width, height);\n\n    // Draw unity field connections\n    if (cosmicState.unity > 0.3) {\n      drawUnityField(ctx);\n    }\n\n    // Draw all entities\n    entities.forEach((entity) => drawEntity(ctx, entity));\n\n    // Draw transcendence effects\n    if (cosmicState.transcendence > 0.5) {\n      drawTranscendenceField(ctx, width, height);\n    }\n\n    // Draw breath visualization\n    if (breathData) {\n      drawBreathField(ctx, width, height);\n    }\n  };\n\n  const drawCosmicField = (ctx, width, height) => {\n    // Subtle cosmic background particles\n    const particleCount = Math.floor(cosmicState.consciousness * 100);\n\n    for (let i = 0; i < particleCount; i++) {\n      const x = Math.random() * width;\n      const y = Math.random() * height;\n      const size = Math.random() * 2;\n      const alpha = cosmicState.consciousness * 0.1;\n\n      ctx.globalAlpha = alpha;\n      ctx.fillStyle = `hsl(${240 + Math.random() * 60}, 50%, 30%)`;\n      ctx.beginPath();\n      ctx.arc(x, y, size, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    ctx.globalAlpha = 1;\n  };\n\n  const drawUnityField = (ctx) => {\n    // Connect nearby entities with unity lines\n    const maxDistance = 150;\n    const lineAlpha = cosmicState.unity * 0.2;\n\n    ctx.globalAlpha = lineAlpha;\n    ctx.strokeStyle = `hsl(${200 + cosmicState.unity * 60}, 60%, 50%)`;\n    ctx.lineWidth = 1;\n\n    for (let i = 0; i < entities.length; i++) {\n      for (let j = i + 1; j < entities.length; j++) {\n        const entity1 = entities[i];\n        const entity2 = entities[j];\n        const distance = Math.sqrt(\n          Math.pow(entity1.x - entity2.x, 2) +\n            Math.pow(entity1.y - entity2.y, 2)\n        );\n\n        if (distance < maxDistance) {\n          const connectionStrength = 1 - distance / maxDistance;\n          ctx.globalAlpha = lineAlpha * connectionStrength;\n\n          ctx.beginPath();\n          ctx.moveTo(entity1.x, entity1.y);\n          ctx.lineTo(entity2.x, entity2.y);\n          ctx.stroke();\n        }\n      }\n    }\n\n    ctx.globalAlpha = 1;\n  };\n\n  const drawEntity = (ctx, entity) => {\n    const { x, y, size, consciousness, complexity, transcended, hue, life } =\n      entity;\n\n    // Main entity body\n    const alpha = transcended ? 0.9 : life * 0.8;\n    ctx.globalAlpha = alpha;\n\n    // Consciousness glow\n    if (consciousness > 0.3) {\n      const glowSize = size * (1 + consciousness * 2);\n      const gradient = ctx.createRadialGradient(x, y, 0, x, y, glowSize);\n      gradient.addColorStop(\n        0,\n        `hsla(${hue}, 80%, 70%, ${consciousness * 0.3})`\n      );\n      gradient.addColorStop(1, \"transparent\");\n\n      ctx.fillStyle = gradient;\n      ctx.beginPath();\n      ctx.arc(x, y, glowSize, 0, Math.PI * 2);\n      ctx.fill();\n    }\n\n    // Entity core\n    ctx.fillStyle = `hsl(${hue}, ${70 + consciousness * 30}%, ${\n      40 + consciousness * 30\n    }%)`;\n    ctx.beginPath();\n    ctx.arc(x, y, size, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Consciousness ring\n    if (consciousness > 0.5) {\n      ctx.globalAlpha = consciousness * 0.6;\n      ctx.strokeStyle = `hsl(${hue + 60}, 90%, 80%)`;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.arc(x, y, size + 3, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    // Transcendence aura\n    if (transcended) {\n      ctx.globalAlpha = 0.4;\n      ctx.strokeStyle = \"white\";\n      ctx.lineWidth = 1;\n      ctx.setLineDash([3, 3]);\n      ctx.beginPath();\n      ctx.arc(x, y, size + 8, 0, Math.PI * 2);\n      ctx.stroke();\n      ctx.setLineDash([]);\n    }\n\n    // Complexity patterns\n    if (complexity > 1) {\n      ctx.globalAlpha = complexity * 0.3;\n      ctx.strokeStyle = `hsl(${hue + 120}, 60%, 60%)`;\n      ctx.lineWidth = 1;\n\n      const spikes = Math.floor(complexity * 8);\n      ctx.beginPath();\n      for (let i = 0; i < spikes; i++) {\n        const angle = (i / spikes) * Math.PI * 2;\n        const x1 = x + Math.cos(angle) * size;\n        const y1 = y + Math.sin(angle) * size;\n        const x2 = x + Math.cos(angle) * (size + complexity * 5);\n        const y2 = y + Math.sin(angle) * (size + complexity * 5);\n\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n      }\n      ctx.stroke();\n    }\n\n    ctx.globalAlpha = 1;\n  };\n\n  const drawTranscendenceField = (ctx, width, height) => {\n    // Transcendence creates reality ripples\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const rippleCount = 5;\n    const time = Date.now() * 0.001;\n\n    ctx.globalAlpha = cosmicState.transcendence * 0.1;\n\n    for (let i = 0; i < rippleCount; i++) {\n      const radius =\n        (50 + i * 100 + Math.sin(time + i) * 30) * cosmicState.transcendence;\n      const hue = 280 + i * 20;\n\n      ctx.strokeStyle = `hsl(${hue}, 70%, 60%)`;\n      ctx.lineWidth = 1;\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, radius, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    ctx.globalAlpha = 1;\n  };\n\n  const drawBreathField = (ctx, width, height) => {\n    if (!breathData.amplitude) return;\n\n    const centerX = width / 2;\n    const centerY = height / 2;\n    const breathRadius = 100 + breathData.amplitude * 200;\n\n    // Breath presence field\n    ctx.globalAlpha = breathData.amplitude * 0.1;\n\n    const gradient = ctx.createRadialGradient(\n      centerX,\n      centerY,\n      0,\n      centerX,\n      centerY,\n      breathRadius\n    );\n\n    const breathColor =\n      breathData.breathPhase === \"inhale\"\n        ? 180\n        : breathData.breathPhase === \"exhale\"\n        ? 60\n        : 300;\n\n    gradient.addColorStop(0, `hsla(${breathColor}, 60%, 50%, 0.2)`);\n    gradient.addColorStop(1, \"transparent\");\n\n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(centerX, centerY, breathRadius, 0, Math.PI * 2);\n    ctx.fill();\n\n    // Breath pulse ring\n    if (\n      breathData.breathPhase === \"inhale\" ||\n      breathData.breathPhase === \"exhale\"\n    ) {\n      ctx.globalAlpha = breathData.amplitude * 0.5;\n      ctx.strokeStyle = `hsl(${breathColor}, 80%, 70%)`;\n      ctx.lineWidth = 2;\n      ctx.beginPath();\n      ctx.arc(centerX, centerY, breathRadius * 0.7, 0, Math.PI * 2);\n      ctx.stroke();\n    }\n\n    ctx.globalAlpha = 1;\n  };\n\n  // Handle window resize\n  useEffect(() => {\n    const handleResize = () => {\n      const canvas = canvasRef.current;\n      if (canvas) {\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n      }\n    };\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => window.removeEventListener(\"resize\", handleResize);\n  }, []);\n\n  return (\n    <canvas\n      ref={canvasRef}\n      className=\"cosmic-canvas\"\n      style={{\n        position: \"absolute\",\n        top: 0,\n        left: 0,\n        width: \"100%\",\n        height: \"100%\",\n        zIndex: 1,\n      }}\n    />\n  );\n}\n\nexport default CosmicCanvas;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}